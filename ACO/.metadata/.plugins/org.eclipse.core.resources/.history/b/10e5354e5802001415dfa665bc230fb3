//============================================================================
// Name        : main.cpp
// Author      : Igor
// Version     : 0.0.0.1
// Description : Dynamic Ant Programming in C++, Ansi-style
//============================================================================

#include <iostream>
#include <stdlib.h>
using namespace std;

#define MAX_ELEMENTOS 200

/* Definição das estruturas de dados */

enum tp_no {TERMINAL=1, NAO_TERMINAL=2};
enum tp_terminais { T_X, T_CT };
enum tp_nao_terminais { T_SOMA, T_SUB, T_MUL, T_DIV, T_SEN, T_COS};
char aridade_nao_terminais[] = {2, 2, 2, 2, 1, 1};

typedef struct{
	tp_no tipo;
	char valor;
	char aridade;
}type_no;

typedef struct{
	type_no caminho[MAX_ELEMENTOS];
	float fitness;
}type_ant;

/**/

/* Variáveis */

type_ant * formigas;
type_no elementos[MAX_ELEMENTOS]; //Elementos da iteração corrente
double feromonios[MAX_ELEMENTOS][MAX_ELEMENTOS*2];

int m_iteracoes; //Número de iterações do algoritmo
int m_n_ants;    //Número de formigasFelipe
float m_alpha;   //Fator de importância do histórico de feromônios
float m_beta;    //Fator de importância da heurística
float m_rho;     //Taxa de evaporação dos feromônios
float probabilidades[MAX_ELEMENTOS]; //Probabilidade de cada elemento ser escolhido

/**/

/* Protótipos das funções */
#include <stdlib.h>

void  ObtemParametros(int argc, char * argv[]);
float CalculaProbabilidade(int i, int j);
float AvaliaPrograma(int * programa, int ** dados);
void  AtualizaFeromonios();
void  DeletaNos();
void  InsereNos();

/* */

int main(int argc, char * argv[]) {

	/*Inicialização*/
	ObtemParametros(argc, argv);

	cout << "Hello";

	return 0;
}

void  ObtemParametros(int argc, char * argv[]){

	m_iteracoes = 100;
	m_n_ants = 100;
	m_alpha  = 0.9;
	m_beta   = 0.1;
	m_rho    = 0;

    formigas = (type_ant *) malloc(m_n_ants * sizeof(type_ant));
}




